[{"content":"系统评测 评估标准间的比较 不需要记各个标准间的对应关系\n共同准则（CC）的各项标准 注：级别越高的标准会涵盖之前级别的测试内容\n1、功能测试：按照功能手册都试一遍\n2、结构测试：功能的实现原理\n3、方法测试和检验：厂商的测试是否全面、有效，用厂商的测试方法看看能不能得到类似的测试数据\n4、方法设计，测试和评审：要提供设计的详细资料（源代码）\n5、半正式设计和测试：用数学的方法去描述设计的目标和过程\n6、半正式验证的设计和测试：使用数学方法证明过程能实现要求\n7、正式验证的设计和测试：所有功能的实现都遵循形式化的验证和要求\n认证和认可 1、前面所提到的各种标准的执行过程叫做认证\n2、认证是一个详细的专业规范的符合性要求的检查过程（认证证书）（专业过程）\n3、认可是参考认证的结果，行政单位或者权威单位对某个产品上线运行给予一个行政批准（行政过程）\n4、认可是一个接受剩余风险的正式批准的过程\n密码学概述 密码学概念 密钥聚类：不同的key得到了相同的密文\n密码术分类 古典密码\n近代密码术\n现代密码术\n基本密码方法概述 一次一密乱码本被誉为无条件安全的密钥算法\n对称密钥算法 加密和解密用一样的密钥\n1、对称密码分为流密码和分组密码两种\n流密码：每次加密一个比特或者字节的密码方法（RC4算法）\n分组密码：每次加密固定大小的数据分组的密码方法（操作模式几乎不考）\n2、非对称密钥的优缺点正好反过来\n数据加密标准（DES）算法 1、有效密钥长度为56位\n2、因为密钥太短，已经被禁止使用了\n三重DES算法 1、加密方式比较多，可以用三个不一样的密钥，也可以连个密钥交替使用（第一个密钥加密，第二个解密，再第一个加密）\n2、基本也被淘汰了\n高级加密标准（AES）算法 1、最流行的对称算法，替代了DES标准算法\n2、密钥可以是128、192、256位\n非对称密钥算法 1、也被称为公钥加密算法\n2、基于非对称数学难题的密钥算法\n3、一个小问题：使用非对称密钥给对方发信息，什么过程该用哪个密钥加密？\n答：我们用对方的公钥加密内容，对方用对方的私钥解密内容；我们用自己的私钥签名，对方用我们的公钥验证签名。\n4、在实际的使用过程中，通常采用对称加密和非对称加密的混合密码系统。\n5、优缺点与对称密钥相反\nDiffie-Hellman算法 1、不是平常日用于加解密的算法，而是一种密钥协商协议（密钥商定协议）\n2、在某一个加密软件产品中（如：SSH），身份认证的非对称算法（SSH采用的事RSA）和协商协议的非对称算法可能不一样\nRSA算法 1、基于大合数因式分解难题\n2、目前安全的密钥长度为2048位\n椭圆曲线密码（ECC）（一类算法） 1、基于有限域中椭圆形曲线群的离散对数难题\n2、160位ECC相当于1024位RSA和80位对称密钥算法强度\n3、优点：速度快、密钥短、消耗资源少，适合智能卡等小型硬件中使用\nEl Gamal算法 1、基于离散对数难题的公钥密码算法，本质上与Diffie-Hellman密钥商定协议类似；（原理一样，目的不同）\n2、与DSA（美国数字签名算法）不同的是，El Gamal算法既可以加解密也可以数字签名，而DSA只能签名\n3、补充：DSA现在基于ECC算法诞生了一种新的签名算法：ECDSA\n完整性验证技术（Hash） 1、特点：任意长度的数据产生固定长度的散列值，任何微小的变动都会产生截然不同的散列值\n2、重要的应用领域：解决数字签名的效率问题\n密码散列函数 1、散列函数的特性：\n散列应对整个消息计算\n抗逆象：给定散列值难以推算出原数据\n抗二次逆象：难以找出与原文具有相同散列值的不一样的数据\n抗碰撞\nMD5散列算法 1、MD5产生128比特文摘\n安全散列算法（SHA） 1、SHA-1产生160比特文摘\n2、目前主要采用SHA-2算法进行签名\n生日攻击（简单了解） 消息验证码（MAC） 基于前面所说的密码算法技术，并且都是用的对称加密\n数字签名 1、数字签名过程\n发送方A，计算自己消息的HASH值，用A自己的密钥加密，得到前面挂接到消息上进行发送。\n接受方B，先摘下签名，用A的公钥解密签名得到A的HASH，然后计算消息的HASH，对比两个HASH是否相同。\n2、优点：防篡改、抗抵赖\n3、使用非对称加密算法\n公钥基础设施 PKI的构成 数字证书 密钥管理 1、密钥生成：在生成时必须在整个密钥空间中进行随机选择\n2、密钥控制：用于加密的密钥最好不要用于签名，反之亦然，不同目的不要混用\n3、密钥更改：要根据业务使用频率定期更换密钥，根CA密钥不能换\n密码技术的应用 链路加密 1、加密在通讯的链路中间设备上进行（路由器，无线AP等）\n2、特点\n若运营商不可信，则会产生虚假的安全感\n端到端加密 1、在通讯的两段进行加密、解密\n网关到网关、终端到终端都算端到端加密\n2、特点\nVPN IPSec协议（网络层安全协议） 1、鉴别抱头基本已经不用了\n2、封装安全载荷不如消息验证码保护的健壮\n2、比较复杂的不是两个协议，而是密钥交换方面的问题（IKE）\n安全关联（SA） 1、IPSec协议里面，两个主机要相互通讯的时候，使用什么算法，每个算法使用什么密钥，我们需要配置协商一下。协商的结果要存在一个位置（SADB）供我们以后使用，这些参数就叫安全关联。\n2、SA的格式标准是用互联网安全关联密钥管理协议（ISKMP）来规范\n注：ISKMP只是个格式标准，并不是一个密钥协商协议\nSSL/TLS协议（传输层安全协议） 1、TLS是SSL演化而来，SSL存在很多安全问题\n2、SSL/TSL握手\n注1：TLS握手中认证身份默认是单向的，即客户端要求认证服务器的身份（也可配置双向认证），服务器要给客户端发送有效证书\n注2：是客户端产生预备秘密，然后用服务器的公钥进行加密\n密码分析学 1、仅知密文攻击是最难的\n2、可选明文-密文攻击不是最终目标，最终目标是找到密钥\nside channel旁路攻击（能量分析）\n物理安全概述 物理安全威胁和风险 物理安全威胁会对人身安全造成威胁，信息安全在人身安全面前不值一提，所以保护人身安全是物理安全保护的第一目标\n物理安全控制 1、技术控制（逻辑控制）：用计算机技术控制\n2、物理控制：栅栏、机械锁、警卫、警犬等\n3、行政控制（管理控制）：对人的培训等\n物理安全规划 关键路径分析（CPA） 1、对数据流经的路径及其支撑系统所遭受的威胁进行分析\n站点选址 1、Fire rating：耐火性\n2、空气正压：机房内的气压大于外面的，防止外部的烟尘等有害物质进入设施\n3、正向流动：防止外部水流进机房\n4、数据中心应该建在中间楼层或者中间楼层偏下的位置，减少火灾和水灾的影响\n","date":"2024-04-09T00:00:00Z","image":"https://www.blain.top/p/cissp-classnote04/title.png","permalink":"https://www.blain.top/p/cissp-classnote04/","title":"第04节：安全工程实施（下）"},{"content":"本章大纲 计算机体系结构 1、体系结构研究的东西是什么？\n答：一个复杂的系统，我们将其拆解为若干个子系统，然后再将子系统划分为若干个组件，研究这些组件、子系统在这个系统中的作用以及其中的关系，从而对复杂系统的特点有更深入的理解。所以体系架构是指的一种研究方法，而不是结果。\n2、不存在什么都能解决的系统架构\n计算机硬件的组成对信息安全有什么影响 CPU CPU的安全问题 1、超线程（HT）：在一个CPU里封装两个逻辑控制单元，同时运行两个线程\n2、超线程导致的安全问题：隐蔽信道（CovertChannel）\n一种特殊的通讯方法导致的泄密，是对保密性的一种破坏\n如：在BLP模型中，内外部保密级别不一样，外部消息可以写入内部，但内部消息无法写入外部。但内外部如果勾结以后，外部写入内部时，内部切断信道代表信息“0”、传入成功代表信息“1”。外部观察这个变化进而获取内部信息。这就是隐蔽信道的一种方式。不是传统意义上的信号泄露。\n注：BLP模型 BLP模型是一种模拟军事安全策略的计算机访问控制模型，它是最早也是最常用的一种多级访问模型，该模型用于保护系统信息的机密性。\n这种0/1存储导致的泄密是存储型隐蔽信道，这种信道隐蔽性不是很强\n3、另一种隐蔽信道：时间调制隐蔽信道（Timing CovertChannel）\n内部使用一种程序来控制内存资源的消耗，外部在写入信息时会时快时慢，快代表“1”，慢代表“0”，这就是一种基于时间调制的隐蔽信道\nCPU的运行状态 解题状态和管理程序状态是运行状态的两种子状态，解题就是正常情况下的非特权状态，管理程序状态可以理解为超级管理员状态。通过内核中的控制单元来确定系统处于什么状态。\nCPU指令执行类型 存在的安全问题：\n1、进程的隔离，不允许不同应用进程之间随意通讯\n2、虚拟化可能导致恶意代码的问题更难发现（黑客通过污染虚拟化程序，导致运行在虚拟化之上的重装系统的防病毒软件无法察觉）\n总线与数据传输 以前信息要从内存储设备转向外存储设备需要通过CPU的控制才可以执行，但如果输出流量比较大的时候，CPU负载就会非常高影响其他程序的运行。\nDMA（直接存储器访问）：绕过CPU，直接连接内存储器和外存储器。\n安全问题：这就相当于绕开了CPU的访问控制\n存储系统的层次结构 Cache（缓存） RAM（内存）（易失存储器） 静态随机存储SRAM 比 动态随机存储DRAM 要快\nROM（只读存储器）（非易失存储器） TPM：可信平台模块，很难被篡改，含有CPU的ROM，用于保护密钥的保密性和完整性\n注：ROM不是硬盘\n物理存储器和虚拟存储器（虚拟内存） 虚拟内存的坏处就是，如果突然断电，计算机来不及删除ROM上的信息，就有可能导致黑客分析磁盘页文件从而产生信息泄露\n输入/输出 keylogger：一种USB的物理键盘监听器\nI/O技术 内部操作系统管理输入输出的技术\n1、编程I/O：外部硬件对内存、磁盘的使用就属于编程I/O，优先级很低\n2、中断处理：\n3、中断向量表：用于存储不同应用程序中断的入口地址，是需要操作系统严格保护的一个资源，黑客可以通过篡改中断向量表来实现提权。\n固件，Firmware 保护机制 保护机制的基本概念 1、主体和客体之间的交互就是访问，安全工作最主要的形式就是进行访问控制来实现一系列的安全策略（系统级）\n2、多级安全策略是最复杂的、解决涉及国家安全问题的安全策略，不是最安全的意思\n保护机制1：TCB（可信计算基） TCB（可信计算基）是桔皮书里的一个概念\n注：桔皮书的标准已经过时了，现在使用“共同准则”来评估系统安全性\n保护机制2：Reference Monitor（参照监视） 1、最核心的机制是访问控制，参照监视可以理解为访问控制的另一种说法\n2、要求：必须能监视所有主体和客体的访问，不能有任何的例外\n保护机制3：Security Kernel（安全内核） 1、安全内核是TCB里面实现RM的一个实体\n2、设计操作系统时，内核必须满足三个内核\n3、可验证性：安全内核要尽量的简单，方便验证\n保护机制4：Protection Ring（保护环） 1、一般从0环开始标注\n2、保护环能实现“隔离”的安全要求，能减少被突破后的损失\n3、保护环是深度防御安全控制原则的具体实现\n保护机制5：Security Labels（安全标记） 1、BLP出现之前用自主访问控制（由某个人的自主意志来决定），BLP出现以后用强制访问控制（由标签的比对来决定）\n2、出现安全标记就要想到强制访问控制\n保护机制6：Security Domain（安全域） 1、将安全需求类似的资源放到一起（这就是安全域）对其进行统一保护。\n2、安全域是简化安全工作的常用方法\n保护机制7：进程隔离，硬件分离，最小特权 保护机制8：Hardening（加固） 1、一般的加固：禁用不用的端口、禁用某些服务等。更高的加固：剥离某些服务的代码\n安全模型 系统运行的安全模式 1、专用模式\n2、系统高模式\n3、分隔模式\n4、多级安全模式\n多级安全的两个特例：\n​\t5、受控模式：在多级系统中，各用户都是能溯源的，若有用户发生泄密，我们能对其进行控制\n​\t6、受限模式：后果有限\n安全模型的基本概念 1、定义：安全模型是高度抽象的、形式化的数学模型\n2、目的：为设计和实现安全机制提供了一种理论框架\n信息安全模型分类 安全模型分为访问控制模型（保密型模型）和完整性模型\n1、状态机模型 1、状态机模型是研究自动化系统的数学工具\n2、安全的状态机模型：是指两个假设和一个推论\n假设系统一共有n+1个状态，并且都是安全的；假设一共有n个状态转换过程，并且也都是安全的。则这个系统就是安全的\n2、信息流模型 1、信息流模型是基于状态机模型的\n2、信息流模型认为，系统运行过程中状态的变化是因为信息的流动导致的。\n3、基于状态机模型的假设，如果信息流动是安全的，则这个系统是安全的\n3、*BLP模型（Bell-LaPadula模型） BLP模型是一个为了解决保密型问题的模型，在涉密领域用的广泛\nBLP模型的安全规则 1、低不能读高，高不能写低。总之信息不能从高流向低\n2、BLP模型中既有强制访问控制又有自助访问控制，属于格子模型。而格子模型属于信息流模型的扩充，所以BLP也属于信息流模型。而信息流模型又是状态机模型的扩充，而BLP也属于状态机模型。\nBLP模型的缺陷 1、BLP模型不能解决所有问题，因为假设不一定成立\n4、Biba模型 1、Biba模型是一个为了解决完整性问题的模型\n2、是格子模型、是信息流模型、是状态机模型\n完整性公理 1、Biba模型高不能读低，低不能写高，如何理解？\n从信息完整性的角度来看，官方媒体（高）不能从自媒体（低）的稿子里随便读取一个信息来发表，自媒体给官方媒体投的稿被直接扔掉。\n2、Biba模型在非涉密领域应用非常广泛\n电力系统使用Biba模型，其二次系统和三次系统之间通过网闸隔离\n5、Lattice模型 1、基于BLP模型的扩充\n2、不仅有层次的隔离，还有类别的隔离\n3、补充：强制访问控制当中，安全标签不仅要有级别的标注，还要有类别的标注\n6、Clark-Wilson模型 1、基于流程的模型，为了实现完整性\n2、工作原理： ①把数据分为两类：自由数据（完整性不确定）、受限数据（约束数据，完整性已经确定，可以使用）\n②模型的作用在于如何把自由数据转化为受限数据。\n③这个转化要通过两个流程来实现，\n转换程序：信息必须通过业务程序录入到系统空间，不能由技术人员直接录入到后台。区别与信息流动的二元组（主体流向客体），模型的信息流动是由三元组实现，即在主客体之间多了转换程序\n完整性检查程序：检查转换程序是否正确。（职务分离）\n3、模型的另一个名字：受限界面模型（restricted interface model）\n7、中国墙模型 1、中国墙另一个常用名字：Brew and Nash模型\n2、安全目标：解决利益冲突\n如何理解利益冲突？\n举例：一个顾问在A银行做评估时听取了A银行的一些管理方式，当在B银行（与A银行存在激烈的竞争关系）进行评估时，或许会将A银行的这些管理方式有意无意地泄露出去，导致A银行的利益受损。\n3、冲突域\n将存在利益冲突的单位放在一个冲突域里面，一个“咨询顾问”只能访问一个冲突域里面的一个客户信息\n8、非干涉模型 1、该模型为了解决隐蔽信道问题\n2、工作流程举例：\n在前面隐蔽信道例子中，相当于加了个中间C，当内部的A无论怎么插拔网线。外界的B都无法观察到其变化。这就阻止了隐蔽信道的问题\n9、取-予模型（Take-Grant） 1、该模型为了解决授权问题\n2、为什么要有这个模型？ 举例：\n①A将权限授予（G）了B\tA→B\n②C是B的上级，获取（T）了B的权限\tB→C\n③D将权限授予了C，C就相当于同时拥有了A与D的权限\tD→C\n④若A和D的权限是需要职责分离的，则C这种情况就不应该发生\tC=A+D\n结论：\n该模型就是利用这种指向图的方式来研究授权过程中的风险，从而提出授权过程的禁止性要求\n10、访问矩阵模型（最常用、最直接） 1、被称为最直接的模型的原因\n因为模型是用来研究安全策略的分析工具，不是用来实现安全策略的方法。而访问控制矩阵既是一个模型又是一个方法，所以被称为最直接的模型\n2、存在的问题\n访问矩阵是一个二维表，当用户和目标过多时，矩阵会存在很多的空值（稀疏矩阵），存储和读取效率比较低。\n3、解决方法1：访问控制列表（主附客）\n相当于只取矩阵的每一列，将附着在客体上的主体单独取出来构成列表。\n4、解决方法2：能力列表（客附主）\n相当于只取矩阵的每一行，将附着在主体上的客体单独取出来构成列表。\n系统评测 目的：让别人相信我们的系统能实现什么安全目标\n信息系统评估标准 1、桔皮书TCSEC是最早的信息安全标准，但仅限于操作系统\n2、ITSEC提出两个要求：安全功能的要求、安全保障的要求\n3、CC国际通用准则后续发展为ISO 15408\nTCSEC，桔皮书（不重要） 校验保护：内核设计需要被证明为是正确的，除了足够简单以外，还要采取形式化设计（需求和设计过程要用数学语言来表达），通过数学证明来证明能实现改目标\nITSEC CC（共同准则） 关键概念 *保护轮廓PP 从用户的角度分层来提出各种安全要求的一种系统化的方法\n基本原理部分其实就是一个证明部分，证明所提出的安全要求足以实现安全目标\n","date":"2024-03-09T00:00:00Z","image":"https://www.blain.top/p/cissp-classnote03/title.jpg","permalink":"https://www.blain.top/p/cissp-classnote03/","title":"第03节：安全工程实施（上）"},{"content":"最近疯狂单曲循环Everywhere We Go\n分享一个知乎博主写的CISSP学习心得\n自学通过CISSP，其实没那么难 以及他的学习笔记\nCISSP知识点梳理 风险管理★ 确定风险消减策略 降低风险是主要的工作内容，转嫁风险可以理解为买保险\n评价残留风险 评价就是指什么样的风险是可以接受的\n1、风险偏好：喜不喜欢冒比较高的风险\n2、风险承受能力：风险容忍度\n3、很多企业内部都有一个风险标杆，一旦评价超过这个风险阈值就绝不开展这个业务。\n组织的信息安全实践（人） 信息安全必须人尽其事\n信息安全管理中的道德 1、需要明确数据收集者和数据主体之间的关系\n2、数据保管者和拥有者可以不是一个人\n3、数据用户一般指日常工作中的一般工作人员\n4、系统用户指的是具有系统管理员权限的用户\n5、系统拥有者一般指系统用户的领导，对系统的配置等能提出管理要求，拥有最高的权限。\n6、系统管理者指IT部门主管一类\n信息系统用户的误区 不正当行为辩护常见的借口\n轻而易举谬论：在网上其实轻而易举就能犯大错误\nISC2的道德规范 1、在ISC2规范中，社会利益＞雇主利益\n设计合理的信息安全组织架构 1、第一道防线：IT部门、业务部门\n2、第二道防线：建立一个脱离IT部门和业务部门之外的专门的信息安全部门，防止出现利益冲突（安全管理委员会设立日常风险管理办公室）\n3、第三道防线：审计部门\n重要的角色和责任 1、最终负责人在不同场景中可能指的人不一样，例如对于企业来说最终负责人是一把手，但对于某些数据来说，可能是数据管理部门的负责人。要注意考题中是否涉及到具体的事务性话题\n2、安全管理员有多种定义，有些是管防火墙这种的，有的是管账号的，还有的是非IT部门中作为“安全接口”（负责上传下达）的人员\n安全建设应按计划行事（top-down） 高度重视人员安全问题 第一阶段：入职 1、背景调查\n2、保密协议\n保密协议往往仅限于心理的影响而不是实际的影响\n第二阶段：在职（后续再讲） 第三阶段：离职 信息安全培训 安全意识培训：对于全员进行培训（最难做的工作）\n安全技能培训：安全相关技能培训（如何使用相关安全设备）\n安全教育培训：专业的技术培训，往往需要了解底层逻辑等。\n计算机犯罪 计算机犯罪定义 1、计算机辅助的犯罪：电信诈骗、通过网络传播淫秽色情图片等\n2、计算机特有的犯罪：DOS攻击，SQL注入攻击\n3、计算机附带因素犯罪：犯罪嫌疑人电脑中的顾客列表\n计算机犯罪特点 1、调查取证困难，证据容易破坏\n2、相关法律还不完善\n3、具有跨地域特征\n4、从统计数据上来看，由内部人员实施的犯罪比率最高（从损失来讲）\n5、受害机构有时不报案，担心损害用户对机构的信心（被勒索）\n计算机犯罪类型 包含不常见类型\n1、萨米拉香肠：积少成多的犯罪\n2、数据篡改：会计欺诈做假账，使得股票升值\n3、电磁泄露捕获：不是wifi等信号窃取，而是电磁辐射泄露导致的（例如窃取别人显示器画面）\n注：通过白噪声、法拉第笼等来减轻电磁泄露风险（tempest）\n计算机犯罪三要素MOM 动机：内因（寻求刺激、报复），挑战，外因（经济、政治，如：APT）\n机会：缺陷、弱点\n方式：了解系统运行机制，使用何种攻击方法等\n计算机犯罪相关法律 法律体系 法律类型 知识产权相关法律 1、著作权只保护创意的表现形式（打击盗版书籍）而不保护作品的创意（书籍的内容被人看了）\n2、商标保护的重要前提是注册，但有时也不用注册\n3、专利必须注册才能被保护，并且还有有效期\n知识产权的保护应当适度，不然容易造成富人更富、穷人更穷的情况\n个人隐私的定义 合理的隐私期待，不能过度使用监视权\nBCP概述（业务持续计划） 灾难的定义 灾备的定义可能不像平常想象中那么“浅显”，它是一种特殊手段，举例：工商银行全业务中断2.5h都没有启动灾备预案。灾备所面临的事件往往更大，需要BIA来确定哪些是关键业务、多长算长时间。\nBCP相关计划之间的关系 考试需要明确BCP与BRP的区别\n1、历史发展：\n备份→异地备份→DRP（重建一个备用站点、备用系统、灾备机房（花费太大））→BCP\n2、BCP的二八原则，将80%的财力用到20%的关键业务当中，BCP的最核心工作就是业务影响分析\n3、BCP是DRP的延伸\ncommunications通常指的是公共关系（记者提问），需要专业人员去发言\n应急响应在运维部分讨论\nBCP项目规划 1、任何安全工作的需求分析都是风险分析来实现的\n2、BCP投资非常大，在项目前期需要沟通好\nBCP项目负责人 一定是个高管，至少是CIO（首席信息官）、或者CEO的副手\nBCP策略条款 业务连续性话题已经远远超出IT范畴，是一种特殊的安全手段，投入非常大，需要IT部门配合\n业务影响分析（BIA） BIA的目的 1、针对重大可用性风险的专项评估\n2、特殊性\n什么是功能支持方面的不足？\n对于业务的影响非常大的单点系统（如果一个路由器坏了，整个业务就中断了，这台路由器就是单点）\nBIA的过程 与定性风险评估的流程基本一样\n1、时间关键：中断后立刻就会产生影响的业务\n2、最大允许中断时间MTD越短的业务越关键\n3、MTD判断标准是造成难以挽回的损失的大小\n支持资源的种类 1、人力资源最难恢复\n2、外部服务恢复也很难\n3、最花钱的是物理基础设施资源\n预期潜在紧急情况 BCP策略选择 确定防御性控制 发现单点问题，设计改造方案\n不同阶段的应急计划策略 1、迁移关键业务是恢复阶段\n2、保护人员安全属于紧急响应阶段\n3、恢复业务正常秩序，由灾备方案切换回正常方案是复原阶段\nBCP策略关键技术指标（考点） 1、恢复时间目标是恢复的快慢\n2、恢复点目标是最大能容忍多长时间的数据损失\n3、单位都是时间\n4、和最大允许中断时间（MTD）之间的关系\nMTD是一个底线，RTO和RPO是所选策略的技术指标，只要RTO＜MTD就算符合基本要求，当然还是在符合成本效益之内越快越好\n","date":"2024-03-04T00:00:00Z","image":"https://www.blain.top/p/cissp-classnote02/title.png","permalink":"https://www.blain.top/p/cissp-classnote02/","title":"第02节：安全与风险管理（下）"},{"content":"章节介绍 风险管理是重点\n前四节是传统安全管理部分\n法律不用太深入研究，很难考到\nBCP业务持续计划：防止业务中断\n信息安全概述 什么是信息？ 信息的重要特征：有意义的、有价值的、本质是无形的、需要靠介质来存储的\n价值评判依据：假如这个信息没保护好，给我们带来损失大小作为评判依据\n信息安全保护最重要的原则：全流程原则 信息安全的基本目标 信息安全的基本目标：保密性、完整性、可用性（CIA）\n与之相反的事DAD三元组：泄露D、篡改A、破坏D\n完整性的信息内部和外部的一致性解释：\n分为内部（IT环境的内部）一致性和外部（IT环境的外部）一致性\n举例：在公司打印机管理系统中，各部门的打印机数量之和与系统记录的总数不一样，这是内部一致性的问题。如果有个部门私自买了一台打印机，没有录入系统，这就是外部一致性问题。\n完整性的延伸：来源真实性、抗抵赖性\n信息安全的本质 不仅仅是保护好CIA，同时还要兼顾效率，学习各方面的基础知识，尽量达成各方面之间的平衡\n本质是一个管理问题\n什么是信息安全管理？ 三分技术、七分管理，需要深入地去理解\n信息安全管理模型 PDCA（戴明环）\n信息安全工作只有开始没有结束\n信息安全治理 什么是安全策略？ 安全策略具有层次性（Top-Down） 方针、标准、指南、基线、程序\n标准：强制标准与推荐标准\n程序又叫流程\n安全策略的层次模型 应该制定哪些策略 AUP：可接受的使用策略（如：公司邮件不允许传输个人信息等）\n针对合规性的审计框架 COSO（财务内控框架） 举例：上个世纪，美国有一些上市公司的经营者和所有者不一定是一个人（职业经理人），如果经理人的控制措施失效了，把企业搞垮了，这些经营者可以什么责任都不负，让国家和股民承担责任，这个逻辑就很不合理。所以用COSO来防止这种情况出现。\nITIL（IT服务质量提升标准） 质量和安全之间的关系：安全和质量有时可以画约等号\nITIL和安全很相关\nCOBIT（IT治理的一个框架） 现在的IT标准有一种不断被拔高的趋势，越来越抽象，越来越难落地\nCOBIT能让IT治理更好地为业务服务：\n企业架构（EA） IT需求的管理工具，发现总结IT需求\n两种常见的企业架构如下\nISO27000系列国际安全标准 ISO27001标准：实施过程、审计要求的标准，是信息安全管理系统 (ISMS) 的规范或认证\nISO27002标准：是27001的补充，更精确和详细，由ISO17799改名而来，\n风险管理★ 风险管理相关要素 风险三要素：资产、威胁、弱点\n计算风险大小还要通过“可能性”、“影响”两个判断★\n如果风险要分为四要素，则需加上“安全措施”\n不考虑安全措施时的风险叫做“固有风险”（全面风险），考虑之后的风险叫做“残留风险”\n风险管理的目标 目标：通过安全工作，影响风险三要素，从而降低风险大小\n1.减少弱点是主要的安全工作（修补漏洞）\n2.如何理解减少资产来降低风险？\n经营资产保持增值主要是从贡献的角度来考虑的，而降低资产价值是从安全角度来提的（不要把鸡蛋放在一个篮子里）\n举例：在线教育系统里面有十年前的历史记录，几乎没人来查询。如果一直存在系统中，一旦系统被攻破，则造成的损失是巨大的。但如果我们将其从系统中剥离，即时系统被攻破，损失也会小得多。\n3.减少威胁如何理解？\n起因：有人认为黑客、地震等影响都是客观存在的，无法减少\n减少资产暴露其实就是减少威胁的方法\n举例1：互联网上有许多黑客，如果一个系统不接入互联网对其影响不大，则将其放置在内网，就是减少威胁的手段\n举例2：建站选址时，考虑地震发生率，也算是减少地震威胁的手段\n安全没有绝对可言 风险管理最重要的原则：成本效益原则 做好安全和效益的平衡\n风险评估很重要\n风险评估★ 风险评估包括风险分析和风险评价两部分\n风险分析是将风险的大小确定下来\n风险评价是提出解决风险的建议\n（没有统一的说法，做题有时要靠上下文分析）\n定量评估和定性评估 定量分析需要具体的金额以及单位，除此是定性分析(高中低)\n定量分析不经常使用（除了诸如保险公司这类的企业）\n定性分析含有很大的主观色彩，属于社会科学，任何的定性测量分析都有不确定性\n单一损失期望计算公式\n年度损失期望计算公式\nDelphi是背对背小组讨论方式，防止个别权威人士发言影响大家充分发挥自己的意见\n（既能防止领导一言堂，也能防止某些人事后诸葛亮）\n识别信息资产 资产价值要由拥有者来判断，由业务主管的意见为准\n评价信息资产 识别并评估威胁 识别并评估弱点 风险评价前需要确定两个指标 风险影响和风险可能性\n风险评估矩阵 定性风险评估的工具\n","date":"2024-03-02T00:00:00Z","image":"https://www.blain.top/p/cissp-classnote01/title.png","permalink":"https://www.blain.top/p/cissp-classnote01/","title":"第01节：安全与风险管理（上）"},{"content":"起因 电脑有时安装的第三方软件在删除后，启动台里的图标始终不消失，重启也不行（如下图所示）。但由于我是强迫症，不删除难受。之前安装网络上的重置启动台的方式确实能删除，但是原先的启动台布局及分类也都消失了，属实难受，故有此文章。\n解决办法 第一步 前往 打开访达，点击最顶部菜单栏的“前往”→“前往文件夹”；或者在访达图标右击，选择“前往文件夹”。接着输入/private/var/folders。\n第二步 搜索 使用搜索功能在folders文件夹下搜索com.apple.dock.launchpad\n接着进入com.apple.dock.launchpad文件夹里，可以看到db文件夹，双击进入db目录。\n第三步 终端命令 右击进入终端，输入如下命令：\nsqlite3 db \u0026#34;delete from apps where title=\u0026#39;appName\u0026#39;;\u0026#34;\u0026amp;\u0026amp;killall Dock appName自行替换为启动台显示的图标名称，回车即可删除\n非常好用 强迫症得到了治愈\n","date":"2024-01-21T00:00:00Z","image":"https://www.blain.top/p/macs-icon/title.jpeg","permalink":"https://www.blain.top/p/macs-icon/","title":"MAC顽固图标删除技巧"},{"content":"写在前面：\n本篇教程由于作者很懒，部分内容可能是从别处CV过来的，可能与作者实际配置的有细微差别，如果发现有错误的地方导致你无法实现该功能先深表歉意，并且欢迎通过右下角的channel联系我~ 在我看到消息后会第一时间给你我实际的配置内容。\n本次装修的环境 操作系统:\tMacOS Sonoma 14.0\nMarkdown编辑器:\tTypora\n博客配置编辑器:\tVS Code\n命令行工具:\tGit、Terminal\nHugo版本:\thugo_extended_0.121.2_darwin-universal\nHugo主题:\thugo-theme-stack\nhugo博客的结构 因为不会写前端，也是第一次搭建hugo博客，在此写下我浅显的理解，如有错误，欢迎批评指正\n本文通过 git submodule 方式安装的stack主题，不难发现，初始化后的主题目录结构为\n. ├── archetypes ├── assets ├── config.yaml ├── content ├── data ├── deploy.sh ├── i18n ├── img ├── layouts ├── public ├── resources ├── static └── themes 而themes/hugo-theme-stack目录下的主题为\n. ├── LICENSE ├── README.md ├── archetypes ├── assets ├── config.yaml ├── data ├── debug.sh ├── exampleSite ├── go.mod ├── i18n ├── images ├── layouts ├── netlify.toml └── theme.toml 二者有很多相似之处（比如都有assets、layouts等目录），通过前端定位等测试发现，主目录下如果和hugo-theme-stack目录有相同的配置文件，则优先生效主目录下的文件（但似乎也有特殊情况，不过通常是这样的）。所以这里建议在assets创建一个名为scss的文件夹,然后在scss文件夹里创建一个名为custom.scss的文件，用于存放魔改代码。引用下面是页面概览：\n整体自定义样式表文件 这里贴出我的整体样式表文件，需要可自取：\n// ~\\blog\\assets\\scss\\custom.scss // 页面基本配色 :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 25px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 40px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 暗色模式下样式 \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { // 行内代码背景色 --code-background-color: #ff6d1b17; // 行内代码前景色 --code-text-color: #e96900; } } //------------------------------------------------------ // 修复引用块内容窄页面显示问题 a { word-break: break-all; } code { word-break: break-all; } //-------------------------------------------------- // 文章封面高度 .article-list article .article-image img { width: 100%; height: 200px !important; object-fit: cover; @include respond(md) { height: 250px !important; } @include respond(xl) { height: 285px !important; } } //--------------------------------------------------- // 文章内容图片圆角阴影 .article-page .main-article .article-content { img { max-width: 96% !important; height: auto !important; border-radius: 8px; } } //------------------------------------------------ // 文章内容引用块样式 .article-content { blockquote { border-left: 6px solid #358b9a1f !important; background: #3a97431f; } } // --------------------------------------- // 代码块基础样式修改 .highlight { max-width: 102% !important; background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; border-radius: 20px; margin-left: -7px !important; margin-right: -12px; box-shadow: var(--shadow-l1) !important; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } // light模式下的代码块样式调整 [data-scheme=\u0026#34;light\u0026#34;] .article-content .highlight { background-color: #fff9f3; } [data-scheme=\u0026#34;light\u0026#34;] .chroma { color: #ff6f00; background-color: #fff9f3cc; } //------------------------------------------- // 设置选中字体的区域背景颜色 //修改选中颜色 ::selection { color: #fff; background: #34495e; } a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } \u0026amp;.link { color: #4288b9ad; font-weight: 600; padding: 0 2px; text-decoration: none; cursor: pointer; \u0026amp;:hover { text-decoration: underline; } } } //------------------------------------------------- //文章封面高度更改 .article-list article .article-image img { width: 100%; height: 150px; object-fit: cover; @include respond(md) { height: 200px; } @include respond(xl) { height: 305px; } } //--------------------------------------------------- // 全局页面布局间距调整 .main-container { min-height: 100vh; align-items: flex-start; padding: 0 15px; gap: var(--section-separation); padding-top: var(--main-top-padding); @include respond(md) { padding: 0 37px; } } //-------------------------------------------------- //页面三栏宽度调整 .container { margin-left: auto; margin-right: auto; .left-sidebar { order: -3; max-width: var(--left-sidebar-max-width); } .right-sidebar { order: -1; max-width: var(--right-sidebar-max-width); /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } \u0026amp;.extended { @include respond(md) { max-width: 1024px; --left-sidebar-max-width: 25%; --right-sidebar-max-width: 22% !important; } @include respond(lg) { max-width: 1280px; --left-sidebar-max-width: 20%; --right-sidebar-max-width: 30%; } @include respond(xl) { max-width: 1453px; //1536px; --left-sidebar-max-width: 15%; --right-sidebar-max-width: 25%; } } \u0026amp;.compact { @include respond(md) { --left-sidebar-max-width: 25%; max-width: 768px; } @include respond(lg) { max-width: 1024px; --left-sidebar-max-width: 20%; } @include respond(xl) { max-width: 1280px; } } } //------------------------------------------------------- //全局页面小图片样式微调 .article-list--compact article .article-image img { width: var(--image-size); height: var(--image-size); object-fit: cover; border-radius: 17%; } //---------------------------------------------------- //固定代码块的高度 .article-content { .highlight { padding: var(--card-padding); pre { width: auto; max-height: 20em; } } } // -------------------------------- // 菜单栏样式 // 下拉菜单改圆角样式 .menu { padding-left: 0; list-style: none; flex-direction: column; overflow-x: hidden; overflow-y: scroll; flex-grow: 1; font-size: 1.6rem; background-color: var(--card-background); box-shadow: var(--shadow-l2); //改个阴影 display: none; margin: 0; //改为0 border-radius: 10px; //加个圆角 padding: 30px 30px; @include respond(xl) { padding: 15px 0; } \u0026amp;, .menu-bottom-section { gap: 30px; @include respond(xl) { gap: 25px; } } \u0026amp;.show { display: flex; } @include respond(md) { align-items: flex-end; display: flex; background-color: transparent; padding: 0; box-shadow: none; margin: 0; } li { position: relative; vertical-align: middle; padding: 0; @include respond(md) { width: 100%; } svg { stroke-width: 1.33; width: 20px; height: 20px; } a { height: 100%; display: inline-flex; align-items: center; color: var(--body-text-color); gap: var(--menu-icon-separation); } span { flex: 1; } \u0026amp;.current { a { color: var(--accent-color); font-weight: bold; } } } } // ~\\blog\\assets\\scss\\custom.scss //------------------------------------------------ //将滚动条修改为圆角样式 //菜单滚动条美化 .menu::-webkit-scrollbar { display: none; } // 全局滚动条美化 html { ::-webkit-scrollbar { width: 20px; } ::-webkit-scrollbar-track { background-color: transparent; } ::-webkit-scrollbar-thumb { background-color: #d6dee1; border-radius: 20px; border: 6px solid transparent; background-clip: content-box; } ::-webkit-scrollbar-thumb:hover { background-color: #a8bbbf; } } //-------------------------------------------------- //归档页面双栏 /* 归档页面两栏 */ @media (min-width: 1024px) { .article-list--compact { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 16px; } } } //-------------------------------------------------- //链接三栏 @media (min-width: 1024px) { .article-list--compact.links { display: grid; grid-template-columns: 1fr 1fr 1fr; //三个1fr即为三栏,两个1fr则为双栏,以此类推即可. background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: var(--card-border-radius); \u0026amp;:nth-child(odd) { margin-right: 8px; } } } } //--------------------------------------------------------- //首页欢迎板块样式 .welcome { color: var(--card-text-color-main); background: var(--card-background); box-shadow: var(--shadow-l2); border-radius: 30px; display: inline-block; } // 👋emoji实现摆动效果 .shake { display: inline-block; animation: shake 1s; animation-duration: 1s; animation-timing-function: ease; animation-delay: 0s; animation-iteration-count: 1; animation-direction: normal; animation-fill-mode: none; animation-play-state: running; animation-name: shake; animation-timeline: auto; animation-range-start: normal; animation-range-end: normal; animation-delay: 2s; @keyframes shake { 0% { transform: rotate(0); } 25% { transform: rotate(45deg) scale(1.2); } 50% { transform: rotate(0) scale(1.2); } 75% { transform: rotate(45deg) scale(1.2); } 100% { transform: rotate(0); } } } // 实现字符跳动动画 .jump-text1 { display: inline-block; animation: jump 0.5s 1; } .jump-text2 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.1s; } .jump-text3 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.2s; } .jump-text4 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.3s; } .jump-text5 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.4s; } .jump-text6 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.5s; } .jump-text7 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.6s; } .jump-text8 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.7s; } .jump-text9 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.9s; } @keyframes jump { 0% { transform: translateY(0); } 50% { transform: translateY(-20px); } 100% { transform: translateY(0); } } //-------------------------------------------------- //引入左上角返回按钮 .back-home { background: var(--card-background); border-radius: var(--tag-border-radius); color: var(--card-text-color-tertiary); margin-right: 0.1rem; margin-top: 24px; display: inline-flex; align-items: center; font-size: 1.4rem; text-transform: uppercase; padding: 10px 20px 10px 15px; transition: box-shadow 0.3s ease; box-shadow: var(--shadow-l3); \u0026amp;:hover { box-shadow: var(--shadow-l2); } svg { margin-right: 5px; width: 20px; height: 20px; } span { font-weight: 500; white-space: nowrap; } } .main-container .right-sidebar { order: 2; max-width: var(--right-sidebar-max-width); /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } main.main { order: 1; min-width: 0; max-width: 100%; flex-grow: 1; display: flex; flex-direction: column; gap: var(--section-separation); @include respond(md) { padding-top: var(--main-top-padding); } } //---------------------------------------------------------- //为代码块顶部添加macos样式 .article-content { .highlight:before { content: \u0026#34;\u0026#34;; display: block; background: url(/img/code-header.svg); height: 32px; width: 100%; background-size: 57px; background-repeat: no-repeat; margin-bottom: 5px; background-position: -1px 2px; } } .tagCloud { .tagCloud-count { color: var(--body-text-color); } } .copyCodeButton { border-radius: var(--category-border-radius); } code { border-radius: var(--category-border-radius); } .article-category { display: flex; flex-wrap: wrap; gap: 10px; a { background: var(--card-background); box-shadow: var(--shadow-l1); border-radius: var(--category-border-radius); padding: 8px 20px; color: var(--card-text-color-main); font-size: 1.4rem; transition: box-shadow 0.3s ease; \u0026amp;:hover { box-shadow: var(--shadow-l2); } } } /* Category widget */ .category { .category-label { display: flex; flex-wrap: wrap; gap: 10px; a { border-left: 6px solid; background: var(--card-background); box-shadow: var(--shadow-l1); border-radius: var(--category-border-radius); padding: 12px 20px; color: var(--card-text-color-main); font-size: 1.5rem; transition: box-shadow 0.3s ease; \u0026amp;:hover { box-shadow: var(--shadow-l2); } } } .category-count { color: var(--body-text-color); } } .running-time { color: var(--card-text-color-secondary); font-weight: normal; .running-days { font-weight:bold; color: var(--emphasize-text-color); } } .totalcount { color: var(--card-text-color-secondary); font-weight: normal; margin-bottom: 5px; } code { border-radius: var(--tag-border-radius); font-size: 14px; // Add font size setting for code block font-family: var(--code-font-family); } .article-subtitle { margin-top: -5px; font-size: 1.5rem; @include respond(md) { font-size: 1.6rem; } } /*头像旋转动画*/ .sidebar header .site-avatar .site-logo { transition: transform 1.65s ease-in-out; //旋转时间 } .sidebar header .site-avatar .site-logo:hover { transform: rotate(360deg); //旋转角度为360度 } /*社交菜单居中*/ .social-menu svg { gap: 15px; justify-content: center; width: 30px; height: 25px; //社交菜单大小 stroke: var(--body-text-color); stroke-width: 1.33; } /*页面加载动画部分*/ #loading-box .loading-left-bg, #loading-box .loading-right-bg { position: fixed; z-index: 1000; width: 50%; height: 100%; // 我在这里小改了一下颜色， background-color: #b1c0c7; transition: all 0.5s; } #loading-box .loading-right-bg { right: 0; } #loading-box\u0026gt;.spinner-box { position: fixed; z-index: 1001; display: flex; justify-content: center; align-items: center; width: 100%; height: 100vh; } #loading-box .spinner-box .configure-border-1 { position: absolute; padding: 3px; width: 115px; height: 115px; background: #ffab91; animation: configure-clockwise 3s ease-in-out 0s infinite alternate; } #loading-box .spinner-box .configure-border-2 { left: -115px; padding: 3px; width: 115px; height: 115px; background: rgb(63, 249, 220); transform: rotate(45deg); animation: configure-xclockwise 3s ease-in-out 0s infinite alternate; } #loading-box .spinner-box .loading-word { position: absolute; color: #ffffff; // 我在这里小改了一下文字大小和字体，注意！ font-size: 1.8rem; font-family: \u0026#39;Zhi Mang Xing\u0026#39;, cursive; } #loading-box .spinner-box .configure-core { width: 100%; height: 100%; background-color: #37474f; } div.loaded div.loading-left-bg { transform: translate(-100%, 0); } div.loaded div.loading-right-bg { transform: translate(100%, 0); } div.loaded div.spinner-box { // 你可以把这个注释掉，这样就能一直看那个动画的效果了！ display: none !important; } @keyframes configure-clockwise { 0% { transform: rotate(0); } 25% { transform: rotate(90deg); } 50% { transform: rotate(180deg); } 75% { transform: rotate(270deg); } 100% { transform: rotate(360deg); } } @keyframes configure-xclockwise { 0% { transform: rotate(45deg); } 25% { transform: rotate(-45deg); } 50% { transform: rotate(-135deg); } 75% { transform: rotate(-225deg); } 100% { transform: rotate(-315deg); } } 动态纹理：蛛网、花瓣 蛛网特效在 /layouts/_default/baseof.html中间插入以下代码\n\u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;https://demo.hellozwh.com/source/canvas-nest.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n花瓣特效只需要将src的地址换为https://cdn.jsdelivr.net/gh/Ukenn2112/UkennWeb@3.0/index/web.js即可\n修改主页侧边栏样式 修改头像及简介 将自己的头像存放在/assets/img/目录下，之后打开主目录下的config.yaml文件，搜索sidebar，\nsubtitle代表简介\navatar的src路径为头像路径\n改为如下代码\n(local最好设置为true，不然头像修改不成功)\nsidebar: compact: false emoji: 🍥 subtitle: 行者不必言深，孤独本是常态。 avatar: enabled: true local: true src: /img/avatar.jpg 修改社交栏 依然是在主目录下的config.yaml文件进行修改，搜索social，需要添加一个社交按钮则仿照原来的添加如下代码：\n- identifier: github name: GitHub url: https://github.com/Bla1n params: newTab: true icon: brand-github icon图标存储目录为~/blog/themes/hugo-theme-stack/assets/icons\n修改栏目 icon存储目录同上，但要修改栏目名称则需要前往/content/page目录\n打开对应栏目文件夹，修改index.md文件\n头像旋转😵‍💫 在assets\\scss\\custom.scss路径下添加如下代码\n/* 头像旋转 */ .home .home-profile .home-avatar img { width: 5rem; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ease-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out; \u0026amp;:hover { /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg); } } 文章添加音乐 单首音乐效果如下\n音乐列表效果如下\n直接在文章中插入如下代码：\n单曲：（autoplay参数为是否自动播放音乐） {{\u0026lt; music server=\u0026#34;netease\u0026#34; type=\u0026#34;song\u0026#34; id=\u0026#34;1372188635\u0026#34; autoplay=\u0026#34;false\u0026#34; \u0026gt;}} 列表： {{\u0026lt; music auto=\u0026#34;https://music.163.com/playlist?id=6843891038\u0026#34;\u0026gt;}} 修改底栏 博客运行时长 在layouts/partials/footer/custom.html里添加以下JS代码，其中s1是网站创建日期。代码参考自这里 ，加上了小时和分钟的计算。\n\u0026lt;!-- Add blog running time --\u0026gt; \u0026lt;script\u0026gt; let s1 = \u0026#39;2023-3-18\u0026#39;; //website start date s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); let s2 = new Date(); let timeDifference = s2.getTime() - s1.getTime(); let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60)); let result = days + \u0026#34;天\u0026#34; + hours + \u0026#34;小时\u0026#34; + minutes + \u0026#34;分钟\u0026#34;; document.getElementById(\u0026#39;runningdays\u0026#39;).innerHTML = result; \u0026lt;/script\u0026gt; 再在layouts/partials/footer/footer.html里添加以下代码：\n\u0026lt;!-- Add blog running time --\u0026gt; \u0026lt;section class=\u0026#34;running-time\u0026#34;\u0026gt; 本博客已稳定运行 \u0026lt;span id=\u0026#34;runningdays\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; 在assets/scss/partials/footer.scss里添加风格样式，这里单独把计时的部分加粗，并改了颜色。\n.running-time { color: var(--card-text-color-secondary); font-weight: normal; .running-days { font-weight:bold; color: var(--emphasize-text-color); } } 上面的计时部分设置成var(--emphasize-text-color)，这样能比较方便地在assets/scss/variables.scss里设置暗色模式的颜色\n--accent-color-text: #fff; --body-text-color: #b0b0b0; --emphasize-text-color: #9e8f9f; // Add emphasize font color \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { --emphasize-text-color: #d5cfc4; // Add emphasize font color for dark scheme } 文字统计 在layouts/partials/footer/footer.html里增加以下代码，其中文章篇数统计参考了这篇 ，字数统计的展示方式参考了小球飞鱼的博客 。\n\u0026lt;!-- Add total page and word count time --\u0026gt; \u0026lt;section class=\u0026#34;totalcount\u0026#34;\u0026gt; {{$scratch := newScratch}} {{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} {{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} {{ end }} 发表了{{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章 · 总计{{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }}k字 \u0026lt;/section\u0026gt; 在assets/scss/partials/footer.scss里修改风格：\n.totalcount { color: var(--card-text-color-secondary); font-weight: normal; margin-bottom: 5px; } 返回顶部按钮 在阅读长文章时，如果想返回顶部没有快捷按钮则是很不方便的，所以添加此按钮\n在/layouts/partials/footer/custom.html里面添加如下代码\n\u0026lt;!--返回顶部按钮 --\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;back-to-top\u0026#34; title=\u0026#34;返回顶部\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;!--返回顶部CSS --\u0026gt; \u0026lt;style\u0026gt; #back-to-top { display: none; position: fixed; bottom: 20px; right: 55px; width: 55px; height: 55px; border-radius: 7px; background-color: rgba(64, 158, 255, 0.5); box-shadow: var(--shadow-l2); font-size: 30px; text-align: center; line-height: 50px; cursor: pointer; } #back-to-top:before { content: \u0026#39; \u0026#39;; display: inline-block; position: relative; top: 0; transform: rotate(135deg); height: 10px; width: 10px; border-width: 0 0 2px 2px; border-color: var(--back-to-top-color); border-style: solid; } #back-to-top:hover:before { border-color: #2674e0; } /* 在屏幕宽度小于 768 像素时，钮位置调整 */ @media screen and (max-width: 768px) { #back-to-top { bottom: 20px; right: 20px; width: 40px; height: 40px; font-size: 10px; } } /* 在屏幕宽度大于等于 1024 像素时，按钮位置调整 */ @media screen and (min-width: 1024px) { #back-to-top { bottom: 20px; right: 40px; } } /* 在屏幕宽度大于等于 1280 像素时，按钮位置调整 */ @media screen and (min-width: 1280px) { #back-to-top { bottom: 20px; right: 55px; } } /* 目录显示时，隐藏按钮 */ @media screen and (min-width: 1536px) { #back-to-top { visibility: hidden; } } \u0026lt;/style\u0026gt; \u0026lt;!--返回顶部JS --\u0026gt; \u0026lt;script\u0026gt; function backToTop() { document.documentElement.scrollIntoView({ behavior: \u0026#39;smooth\u0026#39;, }) } window.onload = function () { let scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop let totopBtn = this.document.getElementById(\u0026#39;back-to-top\u0026#39;) if (scrollTop \u0026gt; 0) { totopBtn.style.display = \u0026#39;inline\u0026#39; } else { totopBtn.style.display = \u0026#39;none\u0026#39; } } window.onscroll = function () { let scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop let totopBtn = this.document.getElementById(\u0026#39;back-to-top\u0026#39;) if (scrollTop \u0026lt; 200) { totopBtn.style.display = \u0026#39;none\u0026#39; } else { totopBtn.style.display = \u0026#39;inline\u0026#39; totopBtn.addEventListener(\u0026#39;click\u0026#39;, backToTop, false) } } \u0026lt;/script\u0026gt; 在layouts/partials/footer/components/script.html里可以修改按钮的颜色：\n#back-to-top { background-color: var(--body-background); } #back-to-top:hover:before { border-color: var(--accent-color); } 去除归档页初始滤镜 具体可看此issue 用/* */注释掉themes/hugo-theme-stack/assets/ts/main.ts中的\nimport { getColor } from \u0026#39;ts/color\u0026#39;; 和 const articleTile = document.querySelector(\u0026#39;.article-list--tile\u0026#39;); if (articleTile) { let observer = new IntersectionObserver(async (entries, observer) =\u0026gt; { entries.forEach(entry =\u0026gt; { if (!entry.isIntersecting) return; observer.unobserve(entry.target); const articles = entry.target.querySelectorAll(\u0026#39;article.has-image\u0026#39;); articles.forEach(async articles =\u0026gt; { const image = articles.querySelector(\u0026#39;img\u0026#39;), imageURL = image.src, key = image.getAttribute(\u0026#39;data-key\u0026#39;), hash = image.getAttribute(\u0026#39;data-hash\u0026#39;), articleDetails: HTMLDivElement = articles.querySelector(\u0026#39;.article-details\u0026#39;); const colors = await getColor(key, hash, imageURL); articleDetails.style.background = ` linear-gradient(0deg, rgba(${colors.DarkMuted.rgb[0]}, ${colors.DarkMuted.rgb[1]}, ${colors.DarkMuted.rgb[2]}, 0.5) 0%, rgba(${colors.Vibrant.rgb[0]}, ${colors.Vibrant.rgb[1]}, ${colors.Vibrant.rgb[2]}, 0.75) 100%)`; }) }) }); observer.observe(articleTile) } 以及themes/hugo-theme-stack/layouts/partials/footer/components/script.html中的\n{{- partial \u0026#34;helper/external\u0026#34; (dict \u0026#34;Context\u0026#34; . \u0026#34;Namespace\u0026#34; \u0026#34;Vibrant\u0026#34;) -}} 添加相册功能 日常更新把图片（需按格式：日期 + 空格 + 图片名）丢到/static/photos/中即可。\n/content/page/photos/index.md创建一个 md，好让 Hugo 生成页面\ntitle: 相册 | photos layout: \u0026#34;photos\u0026#34; slug: \u0026#34;photos\u0026#34; menu: main: weight: -50 params: icon: photos comments: false 创建/layouts/_default/photos.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;div class=\u0026#34;button-group\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;filter-button\u0026#34; data-category=\u0026#34;-\u0026#34;\u0026gt;\u0026amp;nbsp;All\u0026amp;nbsp;\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;filter-button\u0026#34; data-category=\u0026#34;日常\u0026#34;\u0026gt;#日常\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;filter-button\u0026#34; data-category=\u0026#34;风景\u0026#34;\u0026gt;#风景\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;filter-button\u0026#34; data-category=\u0026#34;狗哥\u0026#34;\u0026gt;#狗哥\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;filter-button\u0026#34; data-category=\u0026#34;赛\u0026#34;\u0026gt;#赛\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;gallery-photos page\u0026#34;\u0026gt; {{ range (sort (readDir \u0026#34;./static/photos\u0026#34;) \u0026#34;Name\u0026#34; \u0026#34;desc\u0026#34;)}} {{ if ( .Name | findRE \u0026#34;\\\\.(gif|jpg|jpeg|tiff|png|bmp|webp|avif|jxl)\u0026#34;) }} \u0026lt;div class=\u0026#34;gallery-photo\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;photo-img\u0026#34; loading=\u0026#39;lazy\u0026#39; decoding=\u0026#34;async\u0026#34; src=\u0026#34;/photos/{{ .Name }}\u0026#34; alt=\u0026#34;{{ .Name }}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;photo-title\u0026#34;\u0026gt;{{ .Name | replaceRE \u0026#34;^[0-9 -]+(.*)[.].*\u0026#34; \u0026#34;$1\u0026#34;}}\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;photo-time\u0026#34;\u0026gt;{{ .Name | replaceRE \u0026#34;^([0-9-]+).*[.].*\u0026#34; \u0026#34;$1\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; .gallery-photos{width:100%;} .gallery-photo{width:24.9%;position: relative;visibility: hidden;overflow: hidden;} .gallery-photo.visible{visibility: visible;animation: fadeIn 2s;} .gallery-photo img{ display: block; width:100%; border-radius:20px; padding:4px; animation: fadeIn 1s; cursor: pointer; transition: all .4s ease-in-out; } .gallery-photo span.photo-title,.gallery-photo span.photo-time{ background: rgba(0, 0, 0, 0.3); padding:0px 8px; font-size:0.9rem; color: #fff; display:none; animation: fadeIn 1s; } .gallery-photo span.photo-title{ position:absolute; bottom:4px; left:4px; border-radius:10px; background-color: #a3dfff; color: #000000; font-size:1.2rem } .gallery-photo span.photo-time{position:absolute;top:4px;left:4px;font-size:0.8rem;} .gallery-photo:hover span.photo-title{display:block;} .gallery-photo:hover img{transform: scale(1.1);} .button-group { display: flex; flex-direction: row; gap: 18px; justify-content: center; } .filter-button { padding: 8px 8px; width: auto; background-color: var(--card-background); color: #57bd8f; border: none; border-radius: 5px; cursor: pointer; transition: background-color 0.3s ease; } .filter-button:hover { color: #5e88f7; } .selected-button { background-color: #CCE8CF; color: #000000; /* 选中项的颜色 */ } @media screen and (max-width: 1280px) { .gallery-photo{width:33.3%;} } @media screen and (max-width: 860px) { .gallery-photo{width:49.9%;} } @media (max-width: 683px){ .photo-time{display: none;} } @keyframes fadeIn{ 0% {opacity: 0;} 100% {opacity: 1;} } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;https://immmmm.com/waterfall.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://immmmm.com/imgStatus.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, () =\u0026gt; { imgStatus.watch(\u0026#39;.photo-img\u0026#39;, function(imgs) { if(imgs.isDone()){ waterfall(\u0026#39;.gallery-photos\u0026#39;); let pagePhoto = document.querySelectorAll(\u0026#39;.gallery-photo\u0026#39;); for(var i=0;i \u0026lt; pagePhoto.length;i++){pagePhoto[i].className += \u0026#34; visible\u0026#34;}; } }); window.addEventListener(\u0026#39;resize\u0026#39;, function () { waterfall(\u0026#39;.gallery-photos\u0026#39;); }); }); \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://immmmm.com/view-image.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://immmmm.com/lately.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.Lately \u0026amp;\u0026amp; Lately.init({ target: \u0026#39;.photo-time\u0026#39;}); window.ViewImage \u0026amp;\u0026amp; ViewImage.init(\u0026#39;.gallery-photo img\u0026#39;) \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, () =\u0026gt; { const filterButtons = document.querySelectorAll(\u0026#39;.filter-button\u0026#39;); const galleryPhotos = document.querySelectorAll(\u0026#39;.gallery-photo\u0026#39;); filterButtons.forEach(button =\u0026gt; { button.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const category = button.getAttribute(\u0026#39;data-category\u0026#39;); // 隐藏所有照片 galleryPhotos.forEach(photo =\u0026gt; { photo.style.visibility = \u0026#39;hidden\u0026#39;; }); // 显示符合特定词语的照片 galleryPhotos.forEach(photo =\u0026gt; { const imageName = photo.querySelector(\u0026#39;.photo-img\u0026#39;).getAttribute(\u0026#39;alt\u0026#39;); if (imageName.includes(category)) { photo.style.visibility = \u0026#39;visible\u0026#39;; } }); // 移除所有按钮的选中状态 filterButtons.forEach(btn =\u0026gt; { btn.classList.remove(\u0026#39;selected-button\u0026#39;); }); // 将当前点击的按钮标记为选中状态 button.classList.add(\u0026#39;selected-button\u0026#39;); }); }); }); \u0026lt;/script\u0026gt; {{ end }} 这段代码同时添加了分类功能，只需在图片文件名中含有相应关键字即可分类\n添加右下角联系小气泡按钮 效果图为：\n请参考这两篇文章，两位博主写的非常详细，不难配置，在此不在赘述（懒了，hhh）\n私信联系气泡 与山茶花舍 侧边栏添加新的模块 侧边栏添加模块除了使用前面所说的添加相册功能外，还有一种方式\n在config.yaml文件的menu-main部分进行修改\nmenu: main: - name: 碎语 | moments params: newTab: true icon: moments url: https://moments.blain.top/ weight: -50 注：由于本人技术能力有限，moments主题无法和stack主题同时出现在一个站点下，所以本人采用的方式是在另一个站点部署moments\n参考文章 Stack主题的自定义 Hugo Stack主题装修笔记 Hugo Stack 主题配置与使用 Hugo Stack主题更新小记 Hugo｜自定义 hugo-theme-Stack 创建单页相册 Hugo 的 LoveIt 主题修改及增强（三） shortcode使用 ","date":"2024-01-18T00:00:00Z","image":"https://www.blain.top/p/renovation/title.jpg","permalink":"https://www.blain.top/p/renovation/","title":"小白hugo博客装修笔记（1）"},{"content":"本文代码已上传github，自取\nhttps://github.com/Bla1n/WBDmonitor 0x00 起因 对于我这样一个假粉，想及时地收到喜欢明星的动态真的是太难了，靠APP的特别关注提醒也基本无济于事，除非我每天都打开微博，B站，抖音。但作为一名“热爱学习”的当代青年，以上这些APP能少看还是少看的好。这就是矛盾所在，也就产生了本文。（本文提供两种监控思路）\n0x01 第一种：微博获取文章id 这里感谢奶权师傅的文章 提供的接口：https://m.weibo.cn/。经测试，现在访问已经不需要登陆，省去模拟登陆步骤。\n来看访问用户主页的请求\n最关键的为图中标红框的xhr\n请求一：https://m.weibo.cn/api/container/getIndex?uid=1927305954\u0026amp;t=0\u0026amp;luicode=10000011\u0026amp;lfid=100103type%3D1%26q%3D%E6%88%90%E6%9E%9C\u0026amp;sudaref=login.sina.com.cn\u0026amp;type=uid\u0026amp;value=1927305954\u0026amp;containerid=1005051927305954 请求二：https://m.weibo.cn/api/container/getIndex?uid=1927305954\u0026amp;t=0\u0026amp;luicode=10000011\u0026amp;lfid=100103type%3D1%26q%3D%E6%88%90%E6%9E%9C\u0026amp;sudaref=login.sina.com.cn\u0026amp;type=uid\u0026amp;value=1927305954\u0026amp;containerid=1076031927305954 经测试，请求一中uid参数为各用户专有且固定不变，containerid参数可不加，返回结果包含的containerid参数提供给请求二，其余参数可舍。\n请求二带上containerid参数即可返回微博内容，微博信息都在mblog数组内\n思路：\n1.先访问请求一获取containerid参数，拼接请求二。\n2访问请求二，匹配响应里所有mblog数组里的id值（每条动态对应一个专有id），并存储到文件中。\n3.定时访问，若发现新id值不在文件里，则视为新微博，推送微信消息。\n封装到类里，代码如下（代码显示太丑了，点击github连接查看）\nhttps://github.com/Bla1n/WBDmonitor/blob/main/monitor/wbmonitor.py 0x02 第二种：B站直接坐享其成 原本打算B站直接延续上文思路，但在分析网页内容的时候我发现了一处有意思的地方\nhttps://space.bilibili.com/3345720/video 如图所示，B站已经统计好当前用户视频数了，那么我只要关注这个数字不就行了吗？\n分析请求发现是下面这条连接返回的视频数目，那么剩下的就很简单了\nhttps://api.bilibili.com/x/space/navnum?mid=3345720\u0026jsonp=jsonp\u0026callback= 思路：\n1.拼接api的url（mid参数为b站用户专有且固定不变）\n2.访问获取视频数目，存储到文件里\n3.定时访问，若视频数发生变化，则视为更新\nhttps://github.com/Bla1n/WBDmonitor/blob/main/monitor/bzmonitor.py 0x03 抖音监控（APP端） 抖音与前两者不同，抖音只有APP端才能访问，这就要配合手机或者模拟器来分析（本文用的模拟器）\n查阅资料得知线索，打开抖音用户界面点击分享，里面的链接分享可供我们使用\nhttps://v.douyin.com/e1o7d17/ 分析数据包找到返回作品数的包\nhttps://www.iesdouyin.com/web/api/v2/user/info/?sec_uid=MS4wLjABAAAAnCz_s5xyosgWTo5lTxKCmoYX1-uiytDsAKBye1LbfDE sec_uid参数为用户专有参数\n剩下思路同上\nhttps://github.com/Bla1n/WBDmonitor/blob/main/monitor/dymonitor.py 0x04 推送程序 各平台监控问题解决了，没有一个好的推送也是不行的。日常用的最多的是微信，并且微信来消息的话，提醒也会很明显。\n这里用到https://sre24.com/\n使用也很简单，微信扫描登陆获取token，根据文档的介绍写一个notify函数就可以用了\n0x05 启动程序 不多赘述，看代码\nhttps://github.com/Bla1n/WBDmonitor/blob/main/start.py 0x06 定时任务 奶权师傅文章里采用心跳包的方式，我这种不愿意挂后台的人就用的定时任务，\n如果服务器搭了宝塔可在后台直接设定，没有的用crontab设效果也是一样的\n0x07 使用效果 代码已上传至github，使用方法详见readme\nhttps://github.com/Bla1n/WBDmonitor 0x08 填坑 1.定时任务请将脚本内文件路径改为绝对路径\n2.推送没采用邮件最主要的原因是，我在Windows上测试没有问题，Linux发不出去（端口开启着没被占用，stmp服务似乎是正常的，未解决）\n3.抖音没有直接添加用户ID的选项，因为没有直接获取用户ID的方法，抓包需自己去抓。然后修改url里的sec_user_id参数也是一样的\n4.如果想要用邮箱功能把start.py里的注释去掉即可，注意一点，授权码不是邮箱密码，自行查找邮箱账户。\n哦对了，python3的email库需手动安装，详见Python3下email 安装报错 No module named \u0026lsquo;cStringIO\u0026rsquo; 5.兴趣是学习的第一推动力\n参考文章：\nPython系列之——利用Python实现微博监控 ","date":"2024-01-15T00:00:00Z","image":"https://www.blain.top/p/wbdmonitor/12.jpeg","permalink":"https://www.blain.top/p/wbdmonitor/","title":"微博、B站、抖音实时关注脚本"},{"content":"本文用于记录将hugo博客部署至github托管过程中遇到的问题及解决办法，希望能帮助和我一样的萌新避坑\n托管过程（github action教程） 创建仓库 首先在github创建两个仓库，一个用于存储博客源文件，文件名随意，这里用blog-file，这个设置为private私密；另一个仓库用github官方托管域名username.github.io来命名，设置为公开，如下图所示：\n本地获取ssh密钥 终端输入命令：\ngit config --global user.email \u0026#34;you@example.com\u0026#34; #you@example.com替换为你的邮箱并回车 git config --global user.name \u0026#34;Your Name\u0026#34; #Your Name替换为你的名字并回车 生成ssh key,在git bash中输入以下命令:\nssh-keygen -t rsa mac生成的密钥将存储在~/.ssh路径下\n打开公钥文件 id_rsa.pub/id_rsa_work.pub， 复制所有内容，在GitHub上打开Setting -\u0026gt; SSH and GPG keys -\u0026gt; add SSH key，将复制的内容粘贴在里边，保存。\n创建github token 在 GitHub 账户下 Setting - Developer setting - Personal access tokens(classic) 下创建一个不过期(no expiration)的 Token，权限需要开启 repo 与 workflow。\n（注意：token只会显示一次，请及时保存）\n私密源仓库设置token 在博客源仓库（blog-file）的 Settings - Secrets - Actions 中添加 PERSONAL_TOKEN 环境变量为刚才的 Token，这样 GitHub Action 就可以获取到 Token 了。\n创建workflows发布文件 在本地博客主目录下创建 .github/workflows目录，然后创建deploy.yml文件。我的 GitHub Action 配置为，自动发布示例配置如下：\nname: deploy on: push: workflow_dispatch: # schedule: # Runs everyday at 8:00 AM # - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; extended: true # 这里最好与本机hugo版本一致，例如：hugo-version: \u0026#34;0.121.2\u0026#34; # 有时github部署会自动更新hugo版本导致部署失败 # extended来控制是否为扩展版本 - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: Bla1n/Bla1n.github.io publish_branch: main publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} external_repository替换为自己的公开博客git\n本地快捷push文件 在本地博客根目录文件夹下新建一个名为deploy.sh的文件用于一键部署博客,在deploy.sh中填入如下内容,其中最后一行代码里的git@github.com:Bla1n/blog-file.git需要更改为你自己仓库的地址：\nhugo #构造你的blog git init #初始化git git add -A git commit -m \u0026#39;deploy\u0026#39; git push -f git@github.com:Bla1n/blog-file.git main #向存储库推送 初次使用 之后再本地调试完博客后，即可在终端运行如下命令则可以一键部署到github\nbash deploy.sh 配置自己的域名 等待Github Action完成后,我们需要开启GitHub page，首先进入公开博客仓库，然后打开设置，在如图示位置进行设置（不会的可以自行搜索）\n生效结果 push仓库会重置域名问题 每次push后会发现公开博客仓库设置的自己的域名会被重置为默认域名\n解决方法：在content目录下创建一个名为CNAME的文件，内容填入自己的域名即可\n本地push失败彻底解决办法 在本地push几次后，突然有一天push不成功了，报错类似如下（忘记截图了）\nssh: connect to host github.com port 22: Connection timed out fatal: Could not read from remote repo 解决办法：在~/.ssh路径下，创建一个名为config的文件，内容如下：\nHost github.com User xxxxqq.com(这里换成自己的邮箱) Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443 这样默认push使用https协议，即可成功。\ndeploy突然失败 平常更新都能deploy成功，但有一次上传文章突然就失败了。起初以为是文章的原因，结果回退commit版本依然是部署失败，报错如下：\nERROR TOCSS: failed to transform \u0026#34;/scss/style.scss\u0026#34; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS with transpiler set to \u0026#39;libsass\u0026#39;.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Total in 539 ms Error: error building site: TOCSS: failed to transform \u0026#34;/scss/style.scss\u0026#34; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS with transpiler set to \u0026#39;libsass\u0026#39;.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Error: Process completed with exit code 1. 按照报错信息把网上的教程都试了一遍，都不行，然后仔细看了一眼报错，说我没使用扩展版本的hugo，但是我本地是用的扩展版本，于是检查配置文件。发现wordflows的配置文件关于hugo版本是这样写的：\n- name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;lastest\u0026#34; 日志上的hugo版本果然不对：\n随即查看hugo action官方使用指南，正确写法应该如下：\n- name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.121.2\u0026#34; # 这里最好与本机hugo版本一致，例如：hugo-version: \u0026#34;0.121.2\u0026#34; # 有时github部署会自动更新hugo版本导致部署失败 extended: true # extended来控制是否为扩展版本 ","date":"2024-01-14T00:00:00Z","image":"https://www.blain.top/p/hugo-problems/title.png","permalink":"https://www.blain.top/p/hugo-problems/","title":"hugo搭建遇到问题解决方案"},{"content":"23年亦如22年那般，嗖的一下就过去了。没有过得那么的有意义却很让我难以忘怀，可能，能让我刻骨铭心的，只有……吧。希望24年，我能做出改变。\n简述： 上半年：充实、开心、运气好\n下半年：摆烂、内耗、情绪波动\n总：定力不够，动力不足，懒人一个\n流水账： 还记得开年在家里搞装修，很累，但动起来真的会让自己快乐，归根到底是没有时间去给自己胡思乱想了。这里要吐槽一下爸妈， 也不知道是不是在一起待久了，鸡毛蒜皮的小事就爱吵架，虽然能理解，但真的很烦这种情况，每次都会把我的情绪带动的很差。 和许久未见的老姐约饭看电影，老姐还是那个很温柔、真诚的人，真的非常珍惜这段关系。 换了新电脑，实现了大学时用MAC的梦想 时间来到三月份，研究生生活终于要开启了，涉足了从未到过的东北地区。飞机落地后，感谢叔叔和婶婶对我的热情接待，很大程度上减缓了一个人的不安与恐惧。 之后开启研究生生活，和舍友一起办了健身卡，原来，健身这么快乐。 一直到五月底之前，生活都还不错，与其他人的关系没有什么大问题，也进行了长春citywalk。平平淡淡、无忧无虑算是。 五月底开始钻研yanshee机器人，生活一下子充实起来了，期间掺杂着第二次六级考试，约等于裸考。 六月一日，一次无关紧要的会议上，认识了一个人。 六月的生活可谓是相当充实，研三学长学姐的毕业答辩，与可能是这辈子最牛逼的老师握手合影；参加了可能是最后一届运动会，同学们给我的加油呐喊声依然不绝于耳，也认识了俄罗斯友人；参加了这辈子目前为止最重大的一次会议；经过半个月多的准备，机器人省赛如期进行，只可惜，发挥不尽人意，不过还好进了国赛；端午节一天徒步环绕了净月潭一圈，还是蛮有成就感的。 时间来到七月，暑假开始，期间学校里最大的两件事情就是继续准备机器人国赛以及写论文了。然后参加了姑姑家姐姐的婚礼，解锁了伴郎新体验。 八月，奔赴西安，从出发到最后的结束，都是很棒的一次体验，不但拿到了人生中第一个国家一等奖，还和好兄弟一起进行了一场西安citywalk。相当完美、快乐的一个月。 九月份开学，组织迎新活动，带师弟还是蛮有意思的。不久后就参与了祥云杯总决赛，人生中第一次线下CTF，虽然技术远达不到要求，但侥幸获得了二等奖。中旬短暂的回青，参加了舅家表姐的婚礼，这次只有送亲的角色，不过还是非常开心，见到了多年未见的兄弟，一起度过了几天快乐的时光。 时间来到十月份，中秋和国庆又回去看望叔叔婶婶了，他们带我见了好多从未见过的远方表亲，度过了非常快乐的十一假期。之后便开启了小NAO机器人比赛的准备了，不过这次时间太短，没把它放在心上（懒）。在十月最后一天见到了考研男神汤家凤，真的是很激动，有种梦想照进现实的感觉。 十月的记录还没完，在这个落叶纷飞的季节遇见了一个很好的女生。 时间来到十二月，我们或许短暂地在一起过了。原本这里写了许多的不舍，但如今回头发现，感谢遇见，愿我们在没有对方的日子里，过上更好的生活。 flag： 1.努力让身体和心灵有一个在路上\n2.每月至少写一次小结\n3.少做无用社交\n4.每月至少一本书，写读书笔记\n图片印象 ","date":"2024-01-01T00:00:00Z","image":"https://www.blain.top/p/2023summary/title.png","permalink":"https://www.blain.top/p/2023summary/","title":"2023年度总结（删减版）"}]